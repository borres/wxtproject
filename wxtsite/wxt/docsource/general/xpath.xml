<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<link rel="stylesheet" type="text/css" href="../def.css" title="Style"/>
</head>


<body>
<h1>XPATH in short</h1>
  <p>XPATH was first initiated as a integral, and necessary, part of XSLT,
  but has been lifted out as a concept of its own that is usable in many
  connections. XPATH is a general mechanisme to identify items in a treestructured document.
  </p>

  <p>The basic structure in an XPATH-expression is best considered as an
  analogy to a unix filepath. We always have to take into account what is called
  "the context node". In other words we must be aware of where we stand in the tree
  when we try to formulate an expression that brings us to another place.
  When you formulate XPATH-expressions in connection with WXT we allways
  use the root as context node. The task is allways to select a set of
  nodes somewhere down in the tree (down since trees in the computerworld
  for some reason allways has the root up). Below you will find some
  explained examples of expressions that probably is typical for
  the kind of selections we will use in connection with WXT. The examples
  are inspired by (X)HTML to support your asossiations,
  but are of course not limited to this XML-dialect.
  </p>

 <table>
 <tr>
    <td>//div</td>
    <td>All elements of type div in the document</td>
 </tr>
 <tr>
    <td>//div/p</td>
    <td>All elements of type p which are children of div elements</td>
 </tr>
  <tr>
    <td>//div/*</td>
    <td>All elements which are children of div elements </td>
 </tr>
   <tr>
    <td>//*[@class='mlcode']</td>
    <td>All elements which has an attribute with name class with value mlcode </td>
 </tr>
   <tr>
    <td>//div/*[@class='mlcode']</td>
    <td>All elements which are children of div-elements and has an attribute with name class with value mlcode </td>
 </tr>
   <tr>
    <td>//script[@type='text/javascript'] </td>
    <td>All javascript nodes </td>
 </tr>
   <tr>
    <td>//div[@class='clevel1'][position()=2]</td>
    <td>The second div-element with an attribute class with value clevel1 </td>
 </tr>
   <tr>
    <td>//h1 | //p </td>
    <td>All elements of type h1 or p </td>
 </tr>
   <tr>
    <td>//div[contains(@class,'1')]</td>
    <td>All div elements which has an attribute class that contains the letter 1 </td>
 </tr>

 </table> 
  


	<p>You may find numerous examples and XSL-tutorials on the net.
        It may be usefull to experiment with a tool
	like XPath Explorer <?_wxt ref id="xpathexplorer"?>.
	</p>


</body>
</html>
